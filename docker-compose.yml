version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: instead-postgres:latest
    container_name: instagram-postgres
    environment:
      POSTGRES_DB: instagram_db
      POSTGRES_USER: instagram_user
      POSTGRES_PASSWORD: instagram_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: "md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    # 외부 포트 노출 (직접 접속용)
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U instagram_user -d instagram_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis 캐시 (선택사항)
  redis:
    image: instead-redis:latest
    container_name: instagram-redis
    command: redis-server --appendonly yes --requirepass redis_password --bind 0.0.0.0 --protected-mode yes
    volumes:
      - redis_data:/data
    # 외부 포트 노출 (직접 접속용)
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Flask 백엔드
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: instagram-backend
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=instagram_db
      - DB_USERNAME=instagram_user
      - DB_PASSWORD=instagram_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      - PYTHONUNBUFFERED=1
    # 외부 포트 노출 (직접 접속용)
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads

  # React 프론트엔드
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: instagram-frontend
    environment:
      - REACT_APP_API_URL=http://backend:5000
      - NODE_ENV=development
    # 외부 포트 노출 (직접 접속용)
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

networks:
  # 단일 네트워크 (모든 서비스 공유)
  app-network:
    driver: bridge
    labels:
      - "com.instagram.network.type=app"
